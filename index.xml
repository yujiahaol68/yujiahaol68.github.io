<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Runtime: out of memory</title>
    <link>/</link>
    <description>Recent content on Runtime: out of memory</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CGO封装CPP库的一些最佳实践</title>
      <link>/blog/cgo%E5%B0%81%E8%A3%85cpp%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/cgo%E5%B0%81%E8%A3%85cpp%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>背景 最近业务上需要复用CPP编写的客户端SDK库，为了让团队主力语言Golang能够顺利接入SDK，因此使用了CGO桥接技术将C++11编写</description>
    </item>
    
    <item>
      <title>Leetcode 989. Add to Array-Form of Integer</title>
      <link>/blog/leetcode-989.-add-to-array-form-of-integer/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/leetcode-989.-add-to-array-form-of-integer/</guid>
      <description>题目描述 For a non-negative integer X, the array-form of X is an array of its digits in left to right order. For example, if X = 1231, then the array form is [1,2,3,1] Given the array-form A of a non-negative integer X, return the array-form of the integer X+K. // Author: Tecker // date: 2019.2.14 // 132ms, 13.3MB beat 99.19%, 100.00% // time: O(N), space: O(1) or</description>
    </item>
    
    <item>
      <title>Leetcode 985. Sum of Even Numbers After Queries</title>
      <link>/blog/leetcode-985.-sum-of-even-numbers-after-queries/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/leetcode-985.-sum-of-even-numbers-after-queries/</guid>
      <description>题目描述 时间复杂度：O(N) 空间复杂度：O(1) // Author: Tecker // 176ms, 28.7MB; beat 96.40%, 100% class Solution { public: vector&amp;lt;int&amp;gt; sumEvenAfterQueries(vector&amp;lt;int&amp;gt;&amp;amp; A, vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;&amp;amp; queries) { vector&amp;lt;int&amp;gt; res(A.size(), 0); int sum=0; A[queries[0][1]]+=queries[0][0]; for(int &amp;amp;num : A) { if (num%2==0) sum+=num; } res[0]=sum; for(int i=1;i&amp;lt;queries.size();++i) { int val=queries[i][0]; int idx=queries[i][1]; int tmp =</description>
    </item>
    
    <item>
      <title>poj 3616 Milking Time</title>
      <link>/blog/poj-3616-milking-time/</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/poj-3616-milking-time/</guid>
      <description>原题地址 知识点：权值区间DP 解题报告 #include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; struct P { int start, end, e; }; bool cmp(const P &amp;amp;a, const P &amp;amp;b) { return a.start &amp;lt; b.start; } int N, M, R; struct P a[1002]; int dp[1002]; int main() { scanf(&amp;#34;%d %d %d&amp;#34;, &amp;amp;N, &amp;amp;M, &amp;amp;R); int i, j; for(i=0;i&amp;lt;M;i++) {</description>
    </item>
    
    <item>
      <title>poj 2385 Apple Catching 0ms</title>
      <link>/blog/poj-2385-apple-catching/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/poj-2385-apple-catching/</guid>
      <description>原题地址 知识点：DP 解题报告 #include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;iostream&amp;gt; using namespace std; // j部分定义成 31 时不行？ 向前计算的时候有移动 0，..., 30次，共 31 个状态，因此要定义成 32 // d[第</description>
    </item>
    
    <item>
      <title>poj 2229 Sumsets</title>
      <link>/blog/poj-2229-sumsets/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/poj-2229-sumsets/</guid>
      <description>原题地址 知识点：DP 解题报告 #include &amp;lt;cstdio&amp;gt;#include &amp;lt;string.h&amp;gt; int sum; int d[1000001]; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;sum); int i; // 初始化唯一确定方案数，d[1] 为 1 表示 1 的分解方案只有 1 种 d[1] = 1; for(i=2;i&amp;lt;=sum;++i) { // 找规律，当 i</description>
    </item>
    
    <item>
      <title>poj 3176 Cow Bowling</title>
      <link>/blog/poj-3176-cow-bowling/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/poj-3176-cow-bowling/</guid>
      <description>原题地址 知识点：DP 解题报告 #include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;iostream&amp;gt; using namespace std; int a[350][350]; int d[350][350]; int N; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;N); int i, j; for(i=0;i&amp;lt;N;++i) { for(j=0;j&amp;lt;i+1;++j) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i][j]); } } d[0][0] = a[0][0]; for(i=0;i&amp;lt;N-1;++i) { for(j=0;j&amp;lt;=i;++j) { // 注意这里记忆计算让重叠路径的值最大的技</description>
    </item>
    
    <item>
      <title>Poj 3262 Protecting the Flowers</title>
      <link>/blog/poj-3262-protecting-the-flowers/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/poj-3262-protecting-the-flowers/</guid>
      <description>原题地址 知识点：贪心 解题报告 #include &amp;lt;cstdio&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; struct P { int t, d; }; // 贪心使得代价最小 // cost = 2 * T * (total - D) // 因此 D越大，T越小越好 // 重点：转换成 D / T</description>
    </item>
    
    <item>
      <title>poj 1017 Packets</title>
      <link>/blog/poj-1017-packets/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/poj-1017-packets/</guid>
      <description>知识点：贪心 解题报告 #include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt; int square[7]; // 解法：每次都先放最大 int solve() { int res = 0; // 6x6 直接成一块 res += square[6]; // 5x5 先成一块，再补 1x1 res += square[5]; square[1] -= 11 * square[5]; // 4x4 先成一块，然后</description>
    </item>
    
    <item>
      <title>poj 3040 Allowance</title>
      <link>/blog/poj-3040-allowance/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/poj-3040-allowance/</guid>
      <description>知识点： 贪心 解题报告 #include &amp;lt;cstdio&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;limits&amp;gt; using namespace std; struct Coin { int d; int b; }; bool cmp(const Coin &amp;amp;a, const Coin &amp;amp;b) { return a.d &amp;gt; b.d; } vector&amp;lt;Coin&amp;gt; v; int N, C; int need_count[20]; int main() { scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;N, &amp;amp;C); int res = 0; for(int i=0;i&amp;lt;N;i++) { struct Coin c; scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;c.d, &amp;amp;c.b); if</description>
    </item>
    
    <item>
      <title>poj 1979 Red and Black</title>
      <link>/blog/poj-1979-red-and-black/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/poj-1979-red-and-black/</guid>
      <description>知识点：DFS solution #include &amp;lt;cstdio&amp;gt; int W, H; char tile[25][25]; int pos_x, pos_y; int sh_x[4] = {0, 0, -1, 1}; int sh_y[4] = {1, -1, 0, 0}; int res = 0; void solve(int x, int y) { tile[y][x] = &amp;#39;#&amp;#39;; res++; for (int i=0;i&amp;lt;4;i++) { int new_x = x + sh_x[i]; int new_y = y + sh_y[i]; if (new_x &amp;gt;= 0 &amp;amp;&amp;amp; new_x &amp;lt;W &amp;amp;&amp;amp;</description>
    </item>
    
    <item>
      <title>通过Go HTTP Client的报错看标准库https请求</title>
      <link>/blog/%E9%80%9A%E8%BF%87go-http-client%E7%9A%84%E6%8A%A5%E9%94%99%E7%9C%8B%E6%A0%87%E5%87%86%E5%BA%93https%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E9%80%9A%E8%BF%87go-http-client%E7%9A%84%E6%8A%A5%E9%94%99%E7%9C%8B%E6%A0%87%E5%87%86%E5%BA%93https%E8%AF%B7%E6%B1%82/</guid>
      <description>在用 Go 自带的 http client 进行默认 Get 操作的时候，发现如下错误 x509: certificate signed by unknown authority 这个报错来自 crypto/x509 中关于证书签名的验证 负责验证证书的方法签名 func (c *Certificate) Verify(opts VerifyOptions) (chains [][]*Certificate, err error) 关于</description>
    </item>
    
    <item>
      <title>AC之路 序</title>
      <link>/blog/ac%E4%B9%8B%E8%B7%AF-%E5%BA%8F/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/ac%E4%B9%8B%E8%B7%AF-%E5%BA%8F/</guid>
      <description>不知不觉就要到大三了，也玩过很多东西，但总感觉缺乏新的挑战，到达了一个瓶颈。 于是想要隐居深山，闭关修炼，回到计算机的本源，更多跟深地去死磕自</description>
    </item>
    
    <item>
      <title>LeetCode题解:最长回文串之manacher算法</title>
      <link>/blog/leetcode%E9%A2%98%E8%A7%A3%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2%E4%B9%8Bmanacher%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/leetcode%E9%A2%98%E8%A7%A3%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2%E4%B9%8Bmanacher%E7%AE%97%E6%B3%95/</guid>
      <description>manacher 俗称马拉车算法，也是本文的主角，是一种能够将最长回文串的求解复杂度降低到 O(N) 的一种高效算法， 当我第一次见到求解最长回文串的题目时，首先采用的</description>
    </item>
    
    <item>
      <title>无缓冲通道引发的BUG</title>
      <link>/blog/%E6%97%A0%E7%BC%93%E5%86%B2%E9%80%9A%E9%81%93%E5%BC%95%E5%8F%91%E7%9A%84bug/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E6%97%A0%E7%BC%93%E5%86%B2%E9%80%9A%E9%81%93%E5%BC%95%E5%8F%91%E7%9A%84bug/</guid>
      <description>最近在刚玩具级的 MapReduce ，其中充斥着大量的并发编程的代码，稍有不慎就可能导致 Map 或者 Reduce 的时候遭遇到未知的阻塞状态 (Blocking)，导致整个系统无</description>
    </item>
    
    <item>
      <title>分布式初探 Distributed 101</title>
      <link>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E5%88%9D%E6%8E%A2-distributed-101/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E5%88%9D%E6%8E%A2-distributed-101/</guid>
      <description>什么是分布式系统？ 使用多机来处理单机相同问题的系统 多点存储，多点计算 为什么需要分布式系统？ 解决日益增长的存储资源和计算资源占用的问题，分散系</description>
    </item>
    
    <item>
      <title>0交换排序 Google笔试题</title>
      <link>/blog/0%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F-google%E7%AC%94%E8%AF%95%E9%A2%98/</link>
      <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/0%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F-google%E7%AC%94%E8%AF%95%E9%A2%98/</guid>
      <description>题目: 长度为n的数组乱序存放着0至n-1，现在只能进行0与其他数的交换，请排序这个数组 package main import &amp;#34;fmt&amp;#34; func main() { s := []int{3, 5, 4, 0, 1, 2, 6} for _, v := range s { fmt.Printf(&amp;#34;%d &amp;#34;, v) }</description>
    </item>
    
    <item>
      <title>在 Gin 中实践TDD测试API</title>
      <link>/blog/%E5%9C%A8-gin-%E4%B8%AD%E5%AE%9E%E8%B7%B5tdd%E6%B5%8B%E8%AF%95api/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%9C%A8-gin-%E4%B8%AD%E5%AE%9E%E8%B7%B5tdd%E6%B5%8B%E8%AF%95api/</guid>
      <description>如果这篇文章能够从此让你放下手中的快递员，从此开始做一个 TDD First 的 programmer ，那么本文的目的也就达到了 Why TDD is so important? TDD 的重要性最直接的体现就是 No guessing 和 Robu</description>
    </item>
    
    <item>
      <title>Go下解析XML文档时的编码问题</title>
      <link>/blog/go%E4%B8%8B%E8%A7%A3%E6%9E%90xml%E6%96%87%E6%A1%A3%E6%97%B6%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/go%E4%B8%8B%E8%A7%A3%E6%9E%90xml%E6%96%87%E6%A1%A3%E6%97%B6%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description>最近在弄一些 RSS 解析的东西，记录一下如何解析非UTF-8编码 XML 文档，直接上代码 package rss_test import ( &amp;#34;bytes&amp;#34; &amp;#34;encoding/xml&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;testing&amp;#34; &amp;#34;github.com/yujiahaol68/rossy/rss&amp;#34; &amp;#34;golang.org/x/net/html/charset&amp;#34; ) func Test_notUTF8(t *testing.T) { r := rss.New() // 注意不要使用 xml.Unmarshal() 这个方法，</description>
    </item>
    
    <item>
      <title>使用tensorflow的Object Detection API做物体识别</title>
      <link>/blog/%E4%BD%BF%E7%94%A8tensorflow%E7%9A%84object-detection-api%E5%81%9A%E7%89%A9%E4%BD%93%E8%AF%86%E5%88%AB/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E4%BD%BF%E7%94%A8tensorflow%E7%9A%84object-detection-api%E5%81%9A%E7%89%A9%E4%BD%93%E8%AF%86%E5%88%AB/</guid>
      <description>学校有一个实验要做柑橘识别，因此想要用 tensorflow 用自己的训练集训练出一个只识别柑橘的模型出来，故有下文，别的物体识别也可以使用这种方式自己找数据去训</description>
    </item>
    
    <item>
      <title>SQL基础简明总结</title>
      <link>/blog/sql%E5%9F%BA%E7%A1%80%E7%AE%80%E6%98%8E%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/sql%E5%9F%BA%E7%A1%80%E7%AE%80%E6%98%8E%E6%80%BB%E7%BB%93/</guid>
      <description>Inner Join 只含有关联的行 SELECT field1, RTRIM(field2) AS f2 FROM table_one INNER JOIN table_two ON table_one.table_two_id = table_two.id GROUP BY field1, f2 AVING COUNT(table_two.credit) &amp;gt; 2 WHERE condition1 AND condition2 AND field1 LIKE &amp;#39;%@hotmail.com&amp;#39; ORDER BY field3; Self Join 可用于替代子查询 SELECT c1.cust_id, c1.cust_name, c1.cust_contact FROM customers AS c1, customers AS c2 WHERE c1.cust_name = c2.cust_name AND c2.cust_contact =</description>
    </item>
    
    <item>
      <title>Linux必知之网络基础篇</title>
      <link>/blog/linux%E5%BF%85%E7%9F%A5%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/linux%E5%BF%85%E7%9F%A5%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%AF%87/</guid>
      <description>基本层次结构 网络层 当每个主机连接到一个子网的时候，其在子网中就会有一个IP地址，这个IP地址应该是唯一的但是在专用网络和NAT的情况中， 会有</description>
    </item>
    
    <item>
      <title>Linux日常之进程内存篇</title>
      <link>/blog/linux%E6%97%A5%E5%B8%B8%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E7%AF%87/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/linux%E6%97%A5%E5%B8%B8%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E7%AF%87/</guid>
      <description>基本概念 内核：运行于硬件之上，是操作系统的核心，运行于内存中 进程：计算机中运行的所有程序，并由内核统一管理，这些进程组成了用户空间 用户进程：</description>
    </item>
    
    <item>
      <title>Linux日常之cron篇</title>
      <link>/blog/linux%E6%97%A5%E5%B8%B8%E4%B9%8Bcron%E7%AF%87/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/linux%E6%97%A5%E5%B8%B8%E4%B9%8Bcron%E7%AF%87/</guid>
      <description>cron 能够让我们创建 linux 的定时任务，是系统的内置服务，通过加入自己的配置来达到在某时间段重复执行任务的目的 crontab 通过执行这个命令，我们可以将我们的 crontab 文</description>
    </item>
    
    <item>
      <title>一文讲透koa-源码剖析</title>
      <link>/blog/%E4%B8%80%E6%96%87%E8%AE%B2%E9%80%8Fkoa-%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E4%B8%80%E6%96%87%E8%AE%B2%E9%80%8Fkoa-%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>前言 本文从头开始由浅入深剖析现在十分流行的koa框架的核心源码，适合已经熟练掌握koa框架使用的开发人员阅读 核心机制 现在，让我们从头开始看看</description>
    </item>
    
    <item>
      <title>常见设计模式概要及其实践-TypeScript实现</title>
      <link>/blog/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%A6%81%E5%8F%8A%E5%85%B6%E5%AE%9E%E8%B7%B5-typescript%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%A6%81%E5%8F%8A%E5%85%B6%E5%AE%9E%E8%B7%B5-typescript%E5%AE%9E%E7%8E%B0/</guid>
      <description>若有不足或纰漏，欢迎指教 前言: 得益于TypeScript强大灵活的OOP语法，使得在js中使用经典且可靠的OOP设计模式变成了现实，虽然有的</description>
    </item>
    
    <item>
      <title>使用sftp搭建本地快速部署环境</title>
      <link>/blog/%E4%BD%BF%E7%94%A8sftp%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E4%BD%BF%E7%94%A8sftp%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/</guid>
      <description>准备 首先，我们要确保sshd也就是我们的ssh服务处于运行状态之中，下面以centos为例来讲解搭建的过程。 必要的包: openssh-clients openssh-server 运行下面的命令以确</description>
    </item>
    
    <item>
      <title>Fancy App 1</title>
      <link>/itemized/item1/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/itemized/item1/</guid>
      <description>App 1 </description>
    </item>
    
    <item>
      <title>Fancy App 2</title>
      <link>/itemized/item2/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/itemized/item2/</guid>
      <description>App 2 </description>
    </item>
    
    <item>
      <title>Fancy App 3</title>
      <link>/itemized/item3/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/itemized/item3/</guid>
      <description>App 3 </description>
    </item>
    
    <item>
      <title>Fancy App 4</title>
      <link>/itemized/item4/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/itemized/item4/</guid>
      <description>App 4 </description>
    </item>
    
    <item>
      <title>centOS下的node部署环境搭建</title>
      <link>/blog/centos%E4%B8%8B%E7%9A%84node%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/centos%E4%B8%8B%E7%9A%84node%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>本文实践的是单机搭建 nginx+node+mongodb+redis 流行组合的具体过程 node的安装过程详情 其他的直接上亲自实践过的安装命令以及需要注意的地方，习惯用英文注释，部分重点已</description>
    </item>
    
    <item>
      <title>mongoose下的promise技巧</title>
      <link>/blog/mongoose%E4%B8%8B%E7%9A%84promise%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/mongoose%E4%B8%8B%E7%9A%84promise%E6%8A%80%E5%B7%A7/</guid>
      <description>在Promise大行其道的世界里，使用promise可谓是家常便饭了，写一个漂亮的promise极其重要 本文将会基于Express环境实战m</description>
    </item>
    
    <item>
      <title>用supertest进行API测试</title>
      <link>/blog/%E7%94%A8supertest%E8%BF%9B%E8%A1%8Capi%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E7%94%A8supertest%E8%BF%9B%E8%A1%8Capi%E6%B5%8B%E8%AF%95/</guid>
      <description>在node开发中，写完了API接口之后，往往都要进行测试，现在常用的测试模块一般都是mocha和chai， 然后我们应该有相配合的请求模块来帮</description>
    </item>
    
    <item>
      <title>最精简restful实现</title>
      <link>/blog/%E6%9C%80%E7%B2%BE%E7%AE%80restful%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E6%9C%80%E7%B2%BE%E7%AE%80restful%E5%AE%9E%E7%8E%B0/</guid>
      <description>Time is short. Just show me the code! var http = require(&amp;#39;http&amp;#39;); var url = require(&amp;#39;url&amp;#39;); var items = []; /* 附上测试方法 curl -X GET http://localhost:3000 curl -X POST -d &amp;#34;Node should test in action&amp;#34; http://localhost:3000 curl -X DELETE http://localhost:3000/1 curl -X PUT -d &amp;#34;Pratice node every day&amp;#34; http://localhost:3000/1 */ var server = http.createServer(function (req, res) { // method include POST,GET,DELETE,PUT switch (req.method) { case</description>
    </item>
    
    <item>
      <title>python 语法基础</title>
      <link>/blog/python-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/python-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</guid>
      <description>其中记录了python跟别的语言不一样的一些基础知识点 布尔类型 True False 除法 / 默认的除法是精确除法 // 才是通常的取商的整数部分 字符(类似C的ASCI</description>
    </item>
    
    <item>
      <title>机器学习的常用概念</title>
      <link>/blog/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A6%82%E5%BF%B5/</guid>
      <description>特征(属性) 通常是训练样本集的列，可看作是每个列的列名，比如区分鸟的品种可以用体重，后背颜色此类的特征来加以区分 特征实例 某一特征列其中的数据</description>
    </item>
    
    <item>
      <title>Linux WEB基础 学习笔记</title>
      <link>/blog/linux-web%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/linux-web%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>系统版本选择 根据不同发行版本的特性 red hat 企业（付费） ubuntu 跨设备：服务器，台式，笔记本，嵌入式设备 debian 稳定可靠，但更新周期长 Mint 台式机用户并支持专利性</description>
    </item>
    
    <item>
      <title>Express下多次callback引发的问题</title>
      <link>/blog/express%E4%B8%8B%E5%A4%9A%E6%AC%A1callback%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/express%E4%B8%8B%E5%A4%9A%E6%AC%A1callback%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>错误结果 Error: Can&amp;rsquo;t render headers after they are sent to the client. 错误：当响应头被发回客户端时不能被正确渲染！ 出现场景 Express环境下使用mongoose model 进行模糊查询时，</description>
    </item>
    
    <item>
      <title>CentOS 7 升级最新版本git</title>
      <link>/blog/centos-7-%E5%8D%87%E7%BA%A7%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%ACgit/</link>
      <pubDate>Sat, 11 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/centos-7-%E5%8D%87%E7%BA%A7%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%ACgit/</guid>
      <description>准备工作: CentOS 上的最新git版本也只有1.8.3，就想试着装上最新的版本，没想到差点玩脱，全当记录一次冒险经历 Development tools 没装的要装上，不然GCC编译</description>
    </item>
    
    <item>
      <title>vue-router 快速入门</title>
      <link>/blog/vue-router-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/vue-router-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <description>配置路由 $ npm install vue-router --save routes.js import Home from &amp;#39;./pages/Home.vue&amp;#39; import Gifs from &amp;#39;./pages/Gifs.vue&amp;#39; import User from &amp;#39;./pages/User.vue&amp;#39; export const routes = [ { path: &amp;#39;&amp;#39;, component: Home }, { path: &amp;#39;/gifs&amp;#39;, component: Gifs }, { path: &amp;#39;/user/:id&amp;#39;, component: User } //指定路由和对应要渲染的组件 //404的path</description>
    </item>
    
    <item>
      <title>vuex快速入门</title>
      <link>/blog/vuex%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/vuex%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <description>基本用途： 将某些data变成组件间公用的状态，组件随时都可以进行访问和响应，解决了props传值的链式响应的代码冗余 给状态配以公用方法，将状</description>
    </item>
    
    <item>
      <title>Laravel 5 常用帮助函数</title>
      <link>/blog/laravel-5-%E5%B8%B8%E7%94%A8%E5%B8%AE%E5%8A%A9%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/laravel-5-%E5%B8%B8%E7%94%A8%E5%B8%AE%E5%8A%A9%E5%87%BD%E6%95%B0/</guid>
      <description>1.app() 用于快速生成对应命名空间下的类的实例 $faker = app(Faker\Generator::class); //生成了一个Faker的生成器实例 2.str_random() 用于快速生成限定范围内的随机字符串 $password = str_random(10); //生成10位随机</description>
    </item>
    
    <item>
      <title>Laravel5 新手填坑指南</title>
      <link>/blog/laravel-%E6%96%B0%E6%89%8B%E5%A1%AB%E5%9D%91%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/laravel-%E6%96%B0%E6%89%8B%E5%A1%AB%E5%9D%91%E6%8C%87%E5%8D%97/</guid>
      <description>浏览器篇 开发浏览器: Chorme（不用解释） 注意事项： 一定要先清缓存！清缓存！清缓存！ 重要的说三遍。 环境配置篇 开发环境： Mac/Linux (少很多麻烦) 首选</description>
    </item>
    
    <item>
      <title>Laravel学习笔记</title>
      <link>/blog/laravel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/laravel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>常用函数： compact(&amp;lsquo;变量1&amp;rsquo;,&amp;lsquo;变量2&amp;rsquo;) 类似于es6 的简写，会生成类似于[&#39;nam</description>
    </item>
    
    <item>
      <title>Vue 学习总结</title>
      <link>/blog/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>##将数据渲染进DOM元素 {{message}} v-bind:属性= (也可写作 :属性=) ##常用语句 判断 v-if 循环 v-for=&amp;quot;todo in todos&amp;quot; 按钮 v-on:click=&amp;quot;函数名</description>
    </item>
    
    <item>
      <title>Sass之CSS模块化</title>
      <link>/blog/sass%E4%B9%8Bcss%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/sass%E4%B9%8Bcss%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>一般在项目目录中我们会建一个sass文件夹，内容一般为partials文件夹还有一个app.scss文件，partials文件夹存放我们的C</description>
    </item>
    
    <item>
      <title>Sass语法点总结</title>
      <link>/blog/sass%E8%AF%AD%E6%B3%95%E7%82%B9%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/sass%E8%AF%AD%E6%B3%95%E7%82%B9%E6%80%BB%E7%BB%93/</guid>
      <description>类似PHP，Sass提供了一种类似PHP的感觉，声明变量的方式与PHP相同，赋值方式则与CSS类似$变量名：值; 常用关键词 @import 引入sass模块</description>
    </item>
    
    <item>
      <title>php数组常用方法详解</title>
      <link>/blog/php%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/php%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>众所周知，php的数组可谓是相当强大，很大一部分原因是其数组的方法非常的多而且都非常好用，下面将介绍一些非常实用的数组方法 我们先建立一个对象</description>
    </item>
    
    <item>
      <title>gulp.js简易入门指南</title>
      <link>/blog/gulp-js%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/gulp-js%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid>
      <description>gulp简单来讲，是一个基于流的自动化构建工具，听起来有点奇怪，但是简单理解就是前端工程化工具，它的出现使得我们能够将一些操作或者处理工作直</description>
    </item>
    
    <item>
      <title>php处理html字符串</title>
      <link>/blog/php%E5%A4%84%E7%90%86html%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/php%E5%A4%84%E7%90%86html%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>在开发APP接口的时候，我们经常需要将html富文本字符串进行处理，PHP中自带了许多有用的函数来给我们进行使用 需要用到的函数： str_replace() 字符串替换</description>
    </item>
    
    <item>
      <title>UNIX时间戳与time()算时间差</title>
      <link>/blog/unix%E6%97%B6%E9%97%B4%E6%88%B3%E4%B8%8Etime-%E7%AE%97%E6%97%B6%E9%97%B4%E5%B7%AE/</link>
      <pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/unix%E6%97%B6%E9%97%B4%E6%88%B3%E4%B8%8Etime-%E7%AE%97%E6%97%B6%E9%97%B4%E5%B7%AE/</guid>
      <description>在mysql查询中我们经常会遇到UNIX时间戳的转换还有计算经过时间的问题，下面的我的一种解决方案 需要用到的函数 getdate(unix数字</description>
    </item>
    
    <item>
      <title>TP常用函数总结</title>
      <link>/blog/tp%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/tp%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</guid>
      <description>I函数 用途：获取输入数据，例如表单的接收，API的GET接收参数 定义: I(&#39;接收的数据&#39;，&#39;默认值&#39;,&#39;接收数据的类型&#39;) 用法：I(&#39;get</description>
    </item>
    
    <item>
      <title>夹杂数字字母大小写的字符串按字典排序方法</title>
      <link>/blog/%E5%A4%B9%E6%9D%82%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%A4%B9%E6%9D%82%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</guid>
      <description>核心步骤概要 过滤 过滤数字等特殊符号，只剩下字母 这里要用到String类自带的replaceAll方法以及表达式进行过滤 分割 将字符串进行单字符</description>
    </item>
    
    <item>
      <title>CSS 学习笔记01 wrapper class实现居中</title>
      <link>/blog/css-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01-wrapper-class/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/css-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01-wrapper-class/</guid>
      <description>div内容居中 &amp;lt;!-- DESKTOP NAVIGATION --&amp;gt; &amp;lt;nav class=&amp;#34;top-bar&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;wrap&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;top-bar-left&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;site title&amp;lt;/h3&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;top-bar-right&amp;#34;&amp;gt; &amp;lt;ul class=&amp;#34;menu&amp;#34;&amp;gt; &amp;lt;li&amp;gt;&amp;lt;input type=&amp;#34;search&amp;#34; placeholder=&amp;#34;Search&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;button&amp;#34;&amp;gt;Search&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/nav&amp;gt; .wrap{ width: 90%; margin: 0 auto; max-width: 1000px; } 1.用百分号的好处就是能够实时计算 2.margin用于</description>
    </item>
    
    <item>
      <title>CSS 学习笔记03 按钮Full Height全高度实现</title>
      <link>/blog/css-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-%E6%8C%89%E9%92%AEfull-height%E5%85%A8%E9%AB%98%E5%BA%A6%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/css-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-%E6%8C%89%E9%92%AEfull-height%E5%85%A8%E9%AB%98%E5%BA%A6%E5%AE%9E%E7%8E%B0/</guid>
      <description>nav a.button.alert{ background-color: #e83a37; font-size: 1.1rem; line-height: 60px; padding-top: 0px; padding-bottom: 0px; } line-height 保证居中 接着将padding-top和buttom设置为0即可</description>
    </item>
    
    <item>
      <title>CSS学习笔记02 nav上下居中</title>
      <link>/blog/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-02-nav%E4%B8%8A%E4%B8%8B%E5%B1%85%E4%B8%AD/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-02-nav%E4%B8%8A%E4%B8%8B%E5%B1%85%E4%B8%AD/</guid>
      <description>CSS学习笔记 02 nav上下居中 .nav-desktop{ background-color: #e83a37; font-size: 18px; padding-top: 0px; padding-bottom: 0px; height: 60px; } .menu-text { line-height: 60px; padding: 0px; } 只需要调整line-height与nav导航栏的高度一致，将paddin</description>
    </item>
    
    <item>
      <title>CSS学习笔记04 背景</title>
      <link>/blog/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004-%E8%83%8C%E6%99%AF/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004-%E8%83%8C%E6%99%AF/</guid>
      <description>透明背景 nav { background-color: black; } .menu { background-color: transparent; } 设置透明 这样就使得菜单的颜色与导航栏的颜色一致 背景加亮凸显文字 .menu &amp;gt; li &amp;gt; a:hover { background-color: rgba(255,255,255, 0.1); } 0.1代表透明度为百分之十</description>
    </item>
    
    <item>
      <title>CSS学习笔记05 图片放大特效</title>
      <link>/blog/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E7%89%B9%E6%95%88/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E7%89%B9%E6%95%88/</guid>
      <description>.img-zoom-in img { transition:all .2s ease-in-out; } //记得加上浏览器前缀或者自动补全prefix .img-zoom-in:hover img { transform: scale(1.1); } .post-thumb { overflow: hidden; } //防止图片爆出外层div</description>
    </item>
    
  </channel>
</rss>
