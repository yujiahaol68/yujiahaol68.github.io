<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Runtime: out of memory</title>
    <link>/categories/go/</link>
    <description>Recent content in Go on Runtime: out of memory</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 27 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CGO封装CPP库的一些最佳实践</title>
      <link>/blog/cgo%E5%B0%81%E8%A3%85cpp%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/cgo%E5%B0%81%E8%A3%85cpp%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>背景 最近业务上需要复用CPP编写的客户端SDK库，为了让团队主力语言Golang能够顺利接入SDK，因此使用了CGO桥接技术将C++11编写</description>
    </item>
    
    <item>
      <title>用Go STL查询DB引发的内存泄露</title>
      <link>/blog/%E7%94%A8go-stl%E6%9F%A5%E8%AF%A2db%E5%BC%95%E5%8F%91%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Fri, 06 Mar 2020 13:54:12 +0800</pubDate>
      
      <guid>/blog/%E7%94%A8go-stl%E6%9F%A5%E8%AF%A2db%E5%BC%95%E5%8F%91%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</guid>
      <description>问题起因 这几天有一个 Go API service 经过定时监控发现占用的内存不断上涨，内存从初始的 70M 一直上升到超过 1G 直到吃光内存退出，基本上就可以断定是存在内存泄露</description>
    </item>
    
    <item>
      <title>理解 CPU Cache 对并发性能的影响</title>
      <link>/blog/%E7%90%86%E8%A7%A3-cpu-cache-%E5%AF%B9%E5%B9%B6%E5%8F%91%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D/</link>
      <pubDate>Mon, 30 Dec 2019 10:42:32 +0800</pubDate>
      
      <guid>/blog/%E7%90%86%E8%A7%A3-cpu-cache-%E5%AF%B9%E5%B9%B6%E5%8F%91%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D/</guid>
      <description>一般来说每个 CPU 核有 L1 和 L2 缓存，L3是共享缓存 以缓存行为单位存储，通常是 64 字节为一行 这种利用局部性原理的缓存是数组访问比链表访问快的主要原因 伪</description>
    </item>
    
    <item>
      <title>Go中反序列化后的类型转换问题记录</title>
      <link>/blog/go%E4%B8%AD%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 06 Nov 2019 09:20:41 +0800</pubDate>
      
      <guid>/blog/go%E4%B8%AD%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>在 Go 语言的世界中，类型转换基本上都是很显式的，但最近在编写 web 后台的时候需要进行 context 之间的共享传值，常常就会出现 interface{} 的转换， 最常见的做法就是进行 type</description>
    </item>
    
    <item>
      <title>通过Go HTTP Client的报错看标准库https请求</title>
      <link>/blog/%E9%80%9A%E8%BF%87go-http-client%E7%9A%84%E6%8A%A5%E9%94%99%E7%9C%8B%E6%A0%87%E5%87%86%E5%BA%93https%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E9%80%9A%E8%BF%87go-http-client%E7%9A%84%E6%8A%A5%E9%94%99%E7%9C%8B%E6%A0%87%E5%87%86%E5%BA%93https%E8%AF%B7%E6%B1%82/</guid>
      <description>在用 Go 自带的 http client 进行默认 Get 操作的时候，发现如下错误 x509: certificate signed by unknown authority 这个报错来自 crypto/x509 中关于证书签名的验证 负责验证证书的方法签名 func (c *Certificate) Verify(opts VerifyOptions) (chains [][]*Certificate, err error) 关于</description>
    </item>
    
    <item>
      <title>无缓冲通道引发的BUG</title>
      <link>/blog/%E6%97%A0%E7%BC%93%E5%86%B2%E9%80%9A%E9%81%93%E5%BC%95%E5%8F%91%E7%9A%84bug/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E6%97%A0%E7%BC%93%E5%86%B2%E9%80%9A%E9%81%93%E5%BC%95%E5%8F%91%E7%9A%84bug/</guid>
      <description>最近在刚玩具级的 MapReduce ，其中充斥着大量的并发编程的代码，稍有不慎就可能导致 Map 或者 Reduce 的时候遭遇到未知的阻塞状态 (Blocking)，导致整个系统无</description>
    </item>
    
    <item>
      <title>在 Gin 中实践TDD测试API</title>
      <link>/blog/%E5%9C%A8-gin-%E4%B8%AD%E5%AE%9E%E8%B7%B5tdd%E6%B5%8B%E8%AF%95api/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%9C%A8-gin-%E4%B8%AD%E5%AE%9E%E8%B7%B5tdd%E6%B5%8B%E8%AF%95api/</guid>
      <description>如果这篇文章能够从此让你放下手中的快递员，从此开始做一个 TDD First 的 programmer ，那么本文的目的也就达到了 Why TDD is so important? TDD 的重要性最直接的体现就是 No guessing 和 Robu</description>
    </item>
    
    <item>
      <title>Go下解析XML文档时的编码问题</title>
      <link>/blog/go%E4%B8%8B%E8%A7%A3%E6%9E%90xml%E6%96%87%E6%A1%A3%E6%97%B6%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/go%E4%B8%8B%E8%A7%A3%E6%9E%90xml%E6%96%87%E6%A1%A3%E6%97%B6%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description>最近在弄一些 RSS 解析的东西，记录一下如何解析非UTF-8编码 XML 文档，直接上代码 package rss_test import ( &amp;#34;bytes&amp;#34; &amp;#34;encoding/xml&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;testing&amp;#34; &amp;#34;github.com/yujiahaol68/rossy/rss&amp;#34; &amp;#34;golang.org/x/net/html/charset&amp;#34; ) func Test_notUTF8(t *testing.T) { r := rss.New() // 注意不要使用 xml.Unmarshal() 这个方法，</description>
    </item>
    
  </channel>
</rss>
